package com.haulmont.testtask.dao;

import java.sql.*;
import java.util.ResourceBundle;

public class DBConnection {
    private static Connection connection = null;

    private DBConnection() {
    }

    private static boolean tableExists(String tableName) throws SQLException {
        boolean isExists = false;
        try (ResultSet rs = connection.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tn = rs.getString("TABLE_NAME");
                if (tn != null && tn.equals(tableName)) {
                    isExists = true;
                    break;
                }
            }
        }
        return isExists;
    }

    private static void initDB() throws SQLException {
        try (Statement st = connection.createStatement()) {
            if (!tableExists("PATIENT")) {
                st.execute("CREATE TABLE PATIENT (" +
                        "  ID BIGINT GENERATED BY DEFAULT AS IDENTITY" +
                        "  (START WITH 1, increment BY 1) NOT NULL PRIMARY KEY," +
                        "  FIRST_NAME nvarchar(25) NOT NULL," +
                        "  LAST_NAME nvarchar(25) NOT NULL," +
                        "  MIDDLE_NAME nvarchar(25)," +
                        "  PHONE_NUMBER nvarchar(11));");

                st.executeUpdate("INSERT INTO PATIENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, PHONE_NUMBER) " +
                        "VALUES (1,'Сергей', 'Востокин', 'Владимирович', '32165498765');");
                st.executeUpdate("INSERT INTO PATIENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, PHONE_NUMBER) " +
                        "VALUES (2,'Сергей', 'Комаров', 'Владимирович', '88005553535');");
                st.executeUpdate("INSERT INTO PATIENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, PHONE_NUMBER) " +
                        "VALUES (3,'Артём', 'Мусаликин', 'Сергеевич', '78945612378');");
                st.executeUpdate("INSERT INTO PATIENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, PHONE_NUMBER) " +
                        "VALUES (4,'Елизавета', 'Борисова', 'Викторовна', '11111111111');");
                st.executeUpdate("INSERT INTO PATIENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, PHONE_NUMBER) " +
                        "VALUES (5,'Андрей', 'Козырев', 'Александрович', '32165498756');");
            }

            if (!tableExists("DOCTOR")) {
                st.execute("create table DOCTOR (" +
                        "  ID bigint generated by default as identity" +
                        "  (start with 1, increment by 1) not null primary key," +
                        "  FIRST_NAME nvarchar(25) not null," +
                        "  LAST_NAME nvarchar(25) not null," +
                        "  MIDDLE_NAME nvarchar(25)," +
                        "  SPECIALIZATION nvarchar(40) not null);");

                st.executeUpdate("INSERT INTO DOCTOR (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SPECIALIZATION) " +
                        "VALUES (1, 'Роман', 'Арсланов', 'Иванович', 'Оталаринголог');");
                st.executeUpdate("INSERT INTO DOCTOR (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SPECIALIZATION) " +
                        "VALUES (2, 'Борис', 'Швыдко', 'Михайлович', 'Гастроэнтеролог');");
                st.executeUpdate("INSERT INTO DOCTOR (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SPECIALIZATION) " +
                        "VALUES (3, 'Роман', 'Арсланов', 'Сергеевич', 'Терапевт');");
                st.executeUpdate("INSERT INTO DOCTOR (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SPECIALIZATION) " +
                        "VALUES (4, 'Роман', 'Арсланов', 'Владимирович', 'Терапевт');");
                st.executeUpdate("INSERT INTO DOCTOR (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, SPECIALIZATION) " +
                        "VALUES (5, 'Иван', 'Иванов', 'Иванович', 'Хирург');");
            }

            if (!tableExists("PRESCRIPTION")) {
                st.execute("create table PRESCRIPTION (" +
                        "  ID bigint generated by default as identity" +
                        "  (start with 1, increment by 1) not null primary key," +
                        "  DESCRIPTION nvarchar(200) not null,"+
                        "  PATIENT_ID bigint not null," +
                        "  DOCTOR_ID bigint not null," +
                        "  CREATE_DATE date," +
                        "  EXPIRATION int," +
                        "  PRIORITY nvarchar(32)," +
                        "  constraint FK_PATIENT_PRESCRIPTION foreign key (PATIENT_ID) references PATIENT(ID) on delete restrict," +
                        "  constraint FK_DOCTOR_PRESCRIPTION foreign key (DOCTOR_ID) references DOCTOR(ID) on delete restrict);");

                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (1, 'a', 1, 1, '2018-06-10', 10, 'Нормальный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (2, 'a', 1, 3, '2018-06-10', 5, 'Срочный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (3, 'a', 2, 2, '2018-06-10', 7, 'Нормальный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (4, 'a', 3, 5, '2018-06-10', 4, 'Срочный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (5, 'a', 4, 5, '2018-06-10', 2, 'Немедленный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (6, 'a', 5, 1, '2018-06-10', 12, 'Нормальный');");
                st.executeUpdate("INSERT INTO PRESCRIPTION (ID, DESCRIPTION, PATIENT_ID, DOCTOR_ID, CREATE_DATE, EXPIRATION, PRIORITY) " +
                        "VALUES (7, 'a', 5, 5, '2018-06-10', 1, 'Немедленный');");
            }
        } catch (SQLException e) {
            throw e;
        }
    }

    public static Connection getConnection() throws Exception {
        if (connection == null) {
            try {
                ResourceBundle resource = ResourceBundle.getBundle("database");
                String driver = resource.getString("db.driver");
                String url = resource.getString("db.url");
                String username = resource.getString("db.username");
                String pass = resource.getString("db.password");

                Class.forName(driver);
                connection = DriverManager.getConnection(url, username, pass);
                initDB();
            } catch (Exception e) {
                throw e;
            }
        }
        return connection;
    }

    public static void closeConnection() throws SQLException {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            throw e;
        }
    }
}
